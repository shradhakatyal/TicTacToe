{"version":3,"sources":["components/PlayerInfo/PlayerInfo.js","components/GameBoard/GameBoard.js","components/WinnerPopup/WinnerPopup.js","App.js","serviceWorker.js","index.js"],"names":["PlayerInfo","isActive","className","GameBoard","boardState","onClickCell","console","log","map","row","rowIndex","key","cell","colIndex","onClick","e","el","WinnerPopup","winner","onClickPlayAgain","type","App","i","j","state","isCompleted","setState","prevState","tempArr","completed","count","isTied","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.702f19b9.chunk.js","sourcesContent":["import React from 'react';\n\nimport './PlayerInfo.scss';\n\nconst PlayerInfo = ({ isActive }) => (\n  <div className='players'>\n    <div className={`player-item ${isActive === 'x' ? 'active' : ''}`}>&times;</div>\n    <div className={`player-item ${isActive === 'o' ? 'active' : ''}`}>&#9675;</div>\n    <p className='active-player-text'>Next Move - {isActive === 'x' ? <span>&times;</span> : <span>&#9675;</span>}</p>\n  </div>\n);\n\nexport default PlayerInfo;","import React from 'react';\n\nimport './GameBoard.scss';\n\nconst generateHTMLForCell = (el) => {\n  if(el === 'x') {\n    return (<span>&times;</span>);\n  } else if(el === 'o') {\n    return (<span>&#9675;</span>);\n  } else {\n    return '';\n  }\n}\n\nconst GameBoard = ({ isActive, boardState, onClickCell }) => {\n  console.log(boardState, \"====board state====\");\n  return (\n    <div className='game-board-area'>\n      <div className='game-board'>\n        {\n          boardState.map((row, rowIndex) => (\n            <div className='row' key={rowIndex}>\n              {\n                row.map((cell, colIndex) => (\n                  <div key={`${rowIndex}${colIndex}`}className='cell' onClick={(e) => onClickCell(e, rowIndex, colIndex)}>{generateHTMLForCell(boardState[rowIndex][colIndex])}</div>\n                ))\n              }\n            </div>\n          ))\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default GameBoard;\n","import React from 'react';\n\nimport './WinnerPopup.scss';\n\nconst WinnerPopup = ({ winner, onClickPlayAgain }) => {\n  return (\n    <div className='popup-overlay'>\n      <div className='winner-popup'>\n        <h1>Game Over</h1>\n        {\n          !winner ? \n          <p>The game was a tie!</p>\n          : \n            winner === 'x' ? \n            <p>Player &times; won the game!</p>\n            :\n            <p>Player &#9675; won the game!</p>\n          \n        }\n        <button type='button' onClick={onClickPlayAgain}>Play Again?</button>\n      </div>\n    </div>\n  );\n}\n\nexport default WinnerPopup;","import React from 'react';\nimport './App.css';\nimport PlayerInfo from './components/PlayerInfo/PlayerInfo';\nimport GameBoard from './components/GameBoard/GameBoard';\nimport WinnerPopup from './components/WinnerPopup/WinnerPopup';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isActive: 'x',\n      boardState: [['', '', ''], ['', '', ''], ['', '', '']],\n      isCompleted: false,\n      winner: null,\n      isTied: false,\n      count: 0,\n    }\n  }\n\n  onClickCell = (e, i, j) => {\n    if(!this.state.boardState[i][j] && !this.state.isCompleted) {\n      this.setState((prevState) => {\n        const tempArr = prevState.boardState;\n        tempArr[i][j] = prevState.isActive;\n        let completed = false;\n        if((tempArr[i][0] === prevState.isActive && tempArr[i][1] === prevState.isActive && tempArr[i][2] === prevState.isActive) || (tempArr[0][j] === prevState.isActive && tempArr[1][j] === prevState.isActive && tempArr[2][j] === prevState.isActive) || (i === j && tempArr[0][0] === prevState.isActive && tempArr[1][1] === prevState.isActive && tempArr[2][2] === prevState.isActive) || (((i === 0 && j === 2) || (i === 2 && j === 0)) && tempArr[0][2] === prevState.isActive && tempArr[1][1] === prevState.isActive && tempArr[2][0] === prevState.isActive)) {\n          completed = true;\n        }\n\n        return {\n          boardState: tempArr,\n          isActive: prevState.isActive === 'x' ? 'o' : 'x',\n          isCompleted: completed,\n          winner: completed ? prevState.isActive : null,\n          count: prevState.count + 1,\n          isTied: !completed && prevState.count + 1 === 9,\n        }\n      }, () => {\n        \n      });\n    }\n  }\n\n  onClickPlayAgain = () => {\n    this.setState({\n      isActive: 'x',\n      boardState: [['', '', ''], ['', '', ''], ['', '', '']],\n      isCompleted: false,\n      winner: null,\n      isTied: false,\n      count: 0,\n    });\n  }\n\n  render() {\n    const { isActive, boardState, isCompleted, winner, isTied } = this.state;\n    return (\n      <div className=\"main-wrapper\">\n        <h1 className='main-heading'>TIC TAC TOE</h1>\n        <PlayerInfo isActive={isActive} />\n        <GameBoard isActive={isActive} boardState={boardState} onClickCell={this.onClickCell} />\n        {\n          isCompleted || isTied ? \n            <WinnerPopup winner={winner} onClickPlayAgain={this.onClickPlayAgain} />\n          : ''\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}